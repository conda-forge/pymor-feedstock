{% set version = "2020.1.2" %}

package:
  name: pymor
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/p/pymor/pymor-{{ version }}.tar.gz
  sha256: afeae05bb77a4e75235745bb5597f48f976d9ef1ad3d091beaa722c596bf6af3

build:
  number: 0
  script:
    # this is split in two to workaround an opaque msvc error
    - {{ PYTHON }} setup.py bdist_wheel  # [win]
    # it's really just one file, but windows shell cannot expand glob patterns
    - FOR /R %%G in (pymor*.whl) DO {{ PYTHON }} -m pip install %%G --no-deps --ignore-installed -vvv  # [win]
    # on linux + osx we can do the standard install
    - {{ PYTHON }} -m pip install . --no-deps --ignore-installed -vvv  # [not win]
  skip: true  # [py<35]

requirements:
  build:
    - {{ compiler('c') }}

  host:
    - python
    - pip
    - cython >=0.20.1
    - numpy
    - packaging
    - pytest-runner
    - wheel  # [win]

  run:
    - python
    - ipython >=3.0
    - ipyparallel
    - matplotlib-base
    - pyopengl
    - diskcache
    - pyamg  # [not win]
    - pyqt ==5.12.3
    # this should really be a dependcy of pyqt, but isn't
    - xorg-libxi  # [linux]
    - pillow
    - {{ pin_compatible('numpy') }}
    - scipy >=0.13.3
    - docopt
    - Qt.py
    - packaging
    - mpi4py  # [not win]
    - jupyter

test:
  requires:
    - pytest >=4.6
    - hypothesis
    - packaging
    - mpich  # [not win]

  commands:
    - QT_DEBUG_PLUGINS=1 xvfb-run -a py.test -s -r sxX -k thermalblock --pyargs pymortests -o testpaths=pymortests/ -o python_files="pymortests/demos.py"  # [linux]
    # use something that does not need shaders
    - py.test -v -s -r sxX -k thermalblock_adaptive --pyargs pymortests -o testpaths=pymortests/ -o python_files="pymortests/demos.py"  # [not linux]

  imports:
    - pymor
    - pymordemos

about:
  home: https://pymor.org
  license: BSD-2-Clause
  license_file: LICENSE.txt
  summary: pyMOR is a software library for building model order reduction applications with the Python programming language. Implemented algorithms include reduced basis methods for parametric linear and non-linear problems, as well as system-theoretic methods such as balanced truncation or IRKA. All algorithms in pyMOR
    are formulated in terms of abstract interfaces for seamless integration with external PDE solver packages. Moreover, pure Python implementations of finite element and finite volume discretizations using the NumPy/SciPy scientific computing stack are provided for getting started quickly.

extra:
  recipe-maintainers:
    - renefritze
